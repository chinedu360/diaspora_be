# application:
#   port: 8000

# database:
#   host: "localhost"
#   port: 5432
#   username: "postgres"
#   password: "password"
#   database_name: "diaspora"


name: Rust

on:
  # NB: this differs from the book's project!
  # These settings allow us to run this specific CI pipeline for PRs against
  # this specific branch (a.k.a. book chapter).
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.5
  # SQLx CLI has different feature flags than the library
  SQLX_CLI_FEATURES: "postgres,rustls"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Service containers to run alongside the `test` container job
    services:
      postgres:
        # Docker Hub image
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: diaspora  # ← Changed from 'postgres' to 'diaspora'
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v4

      # This GitHub Action installs a Rust toolchain using rustup
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli \
            --version=${{ env.SQLX_VERSION }} \
            --features ${{ env.SQLX_CLI_FEATURES }} \
            --no-default-features \
            --locked

      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client

      - name: Run database setup script
        run: |
          # Make script executable
          chmod +x scripts/init_db.sh
          # Run the script with SKIP_DOCKER=true to skip Docker container creation
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

      - name: Check prepared queries
        run: |
          export DATABASE_URL="postgres://postgres:password@localhost:5432/diaspora"
          cargo sqlx prepare --workspace --check -- --all-targets

  # `fmt` container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: diaspora  # ← Changed from 'postgres' to 'diaspora'
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli \
            --version=${{ env.SQLX_VERSION }} \
            --features ${{ env.SQLX_CLI_FEATURES }} \
            --no-default-features \
            --locked
      
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client
      
      # ← REMOVED the "Create app user in Postgres" step entirely
      
      - name: Run database setup script
        run: |
          chmod +x scripts/init_db.sh
          SKIP_DOCKER=true ./scripts/init_db.sh
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/