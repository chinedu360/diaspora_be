name: Rust CI

on:
  push:
    branches: [ master ]  # Adjust to your master branch name
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ master ]  # Adjust to your master branch name

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.5
  SQLX_FEATURES: "runtime-tokio,tls-rustls-ring-webpki,macros,postgres,uuid,chrono,migrate,json,rust_decimal"
  APP_USER: postgres
  APP_USER_PWD: password
  APP_DB_NAME: diaspora

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked

      - name: Run database setup script
        run: |
          # Make script executable
          chmod +x scripts/init_db.sh
          # Run the script with SKIP_DOCKER=true to skip Docker container creation since we're using GitHub Actions service
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

      - name: Check prepared queries
        run: cargo sqlx prepare --workspace --check -- --all-targets

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      
      - name: Run database setup script
        run: |
          # Make script executable
          chmod +x scripts/init_db.sh
          # Run the script with SKIP_DOCKER=true to skip Docker container creation
          SKIP_DOCKER=true ./scripts/init_db.sh
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      
      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage
      
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/